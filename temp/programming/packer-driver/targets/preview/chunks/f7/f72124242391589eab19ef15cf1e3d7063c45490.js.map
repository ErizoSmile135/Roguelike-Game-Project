{"version":3,"sources":["file:///C:/GameECSProject/assets/scripts/core/GameManager.ts"],"names":["GameManager","EntityManager","RenderSystem","RoomSystem","InputSystem","PlayerTag","Health","Damage","InputComponent","Position","InputNames","MovementSystem","constructor","entityManager","prefabs","roomTemplate","gameRoot","playerId","tileSize","createPlayer","id","createEntity","addComponent","initializeRoomTemplate","templates","initializeSystems","renderSystem","roomSystem","inputSystem","movementSystem","setPrefabs","getPrefab","name","setGameRoot","getPlayerEntityId","onTileTapped","pos","inputEntity","input","Move","updateSystems","dt","update"],"mappings":"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","sourcesContent":["import { Prefab, Node } from \"cc\";\nimport { InputType, PrefabType, RoomTemplate } from \"../data/types\";\nimport { EntityManager } from \"./EntityManager\";\nimport { RenderSystem } from \"../systems/RenderSystem\";\nimport { RoomSystem } from \"../systems/RoomSystem\";\nimport { InputSystem } from \"../systems/InputSystem\";\nimport { PlayerTag } from \"../components/Tag/PlayerTag\";\nimport { Health } from \"../components/Health\";\nimport { Damage } from \"../components/Damage\";\nimport { InputComponent } from \"../components/core/InputComponent\";\nimport { Position } from \"../components/Position\";\nimport { InputNames} from \"../data/consts\";\nimport { MovementSystem } from \"../systems/MovementSystem\";\n\nexport class GameManager {\n    private entityManager: EntityManager;\n    private prefabs: Record<PrefabType, Prefab> = {} as Record<PrefabType, Prefab>;\n    private roomTemplate: RoomTemplate[] = [];\n    private gameRoot: Node = null!;\n\n    public renderSystem!: RenderSystem;\n    public roomSystem!: RoomSystem;\n    public inputSystem!: InputSystem;\n    public movementSystem!: MovementSystem;\n\n    private playerId: number | null = null;\n\n    public tileSize: number = 64;\n\n    constructor(){\n        this.entityManager = new EntityManager();\n    }\n\n    createPlayer() {\n        const id = this.entityManager.createEntity();\n        this.entityManager.addComponent(id, new PlayerTag(), PlayerTag);\n        this.entityManager.addComponent(id, new Position(0, 0), Position);\n        this.entityManager.addComponent(id, new Health(100), Health);\n        this.entityManager.addComponent(id, new Damage(10), Damage);\n        this.playerId = id;\n    }\n\n    /*  Паттерн синглтона через геттер (я использовал экспорт в Game)\n    private static _instance: GameManager;\n    static get instance(): GameManager {\n      if (!this._instance) {\n        this._instance = new GameManager();\n      }\n      return this._instance;\n    }\n    private constructor() {}*/\n\n    initializeRoomTemplate(templates: RoomTemplate[]) {\n        this.roomTemplate = templates;\n    }\n\n    initializeSystems(){\n        this.renderSystem = new RenderSystem(this.entityManager, this.prefabs, this.gameRoot, this.tileSize);\n        this.roomSystem = new RoomSystem(this.entityManager, this.roomTemplate, this.playerId);\n        this.inputSystem = new InputSystem(this.entityManager, this.playerId);\n        this.movementSystem = new MovementSystem(this.entityManager);\n    }\n\n    setPrefabs(prefabs: Record<PrefabType, Prefab>){\n        this.prefabs = prefabs;\n    }\n\n    getPrefab(name: PrefabType): Prefab | null {\n        return this.prefabs[name] || null;\n    }\n\n    setGameRoot(gameRoot: Node){\n        this.gameRoot = gameRoot;\n    }\n\n    getPlayerEntityId(): number{\n       return this.playerId;\n    }\n\n    /*handleInput(input: InputComponent) {\n        const inputId = this.entityManager.createEntity();\n        this.entityManager.addComponent(inputId, input, InputComponent);\n        //this.inputSystem.handleInput(input);\n    }*/\n\n    /*onTileTapped(pos: Position) {\n        const entities = this.findEntitiesAtPosition(pos);\n        let input: InputType = InputNames.Move;\n        \n        for (const id of entities) {\n            if (this.entityManager.hasComponent(id, EnemyTag)) {\n                input = InputNames.Attack;\n                break;\n            }\n            if (this.entityManager.hasComponent(id, TrapComponent)) {\n                inputType = InputType.Interact;\n            }\n        }\n\n        const inputId = this.entityManager.createEntity();\n        const inputCom = new InputComponent(this.playerId, input, pos);\n        this.entityManager.addComponent(inputId, inputCom, InputComponent);\n    }\n\n    findEntitiesAtPosition(pos: Position): number[] {\n        const result: number[] = [];\n        const all = this.entityManager.getEntityWithComponent(Position);\n        for (const id of all) {\n            const p = this.entityManager.getComponent(id, Position);\n            if (p && p.x === pos.x && p.y === pos.y) {\n                result.push(id);\n            }\n        }\n        return result;\n    }*/\n\n    onTileTapped(pos: Position) {\n        const inputEntity = this.entityManager.createEntity();\n        const input = new InputComponent(this.playerId, InputNames.Move, pos);\n        this.entityManager.addComponent(inputEntity, input, InputComponent);\n    }\n\n    updateSystems(dt: number) {\n        this.inputSystem.update(dt);\n        this.movementSystem.update(dt);\n        this.renderSystem.update(dt);\n        // this.combatSystem.update(dt);\n    }\n}\n\n"]}