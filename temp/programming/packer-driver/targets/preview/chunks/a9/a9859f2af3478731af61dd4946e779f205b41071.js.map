{"version":3,"sources":["file:///C:/GameECSProject/assets/scripts/systems/RenderSystem.ts"],"names":["RenderSystem","instantiate","Vec3","Node","PlayerTag","PrefabNames","EnemyTag","TileTag","Position","ViewComponent","SceneController","constructor","entityManager","prefabs","gameRoot","tilesLayer","entityLayer","playerLayer","tileSize","getPrefabName","entityId","hasComponent","Player","Enemy","Tile","render","entities","getEntityWithComponent","prefabName","id","position","getComponent","view","console","log","addComponent","prefab","node","setPosition","x","y","on","EventType","TOUCH_END","_instance","onTileTapped","addChild","update","dt","pos","getPosition","z"],"mappings":"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","sourcesContent":["import { instantiate, Prefab, Vec3, Node, UITransform } from \"cc\";\nimport { EntityManager } from \"../core/EntityManager\";\nimport { PlayerTag } from \"../components/Tag/PlayerTag\";\nimport { PrefabNames } from \"../data/consts\";\nimport { EnemyTag } from \"../components/Tag/EnemyTag\";\nimport { TileTag } from \"../components/Tag/TileTag\";\nimport { Position } from \"../components/Position\";\nimport { ViewComponent } from \"../components/core/ViewComponent\";\nimport { SceneController } from \"../core/SceneController\";\nimport { PrefabType } from \"../data/types\";\n\nexport class RenderSystem {\n    constructor(private entityManager: EntityManager,\n                private prefabs: Record<PrefabType, Prefab>,\n                private gameRoot: Node,\n                private tilesLayer: Node,\n                private entityLayer: Node,\n                private playerLayer: Node,\n                private tileSize: number\n    ){}\n\n    getPrefabName(entityId: number): PrefabType | null {\n        if (this.entityManager.hasComponent(entityId, PlayerTag)) return PrefabNames.Player;\n        if (this.entityManager.hasComponent(entityId, EnemyTag)) return PrefabNames.Enemy;\n        if (this.entityManager.hasComponent(entityId, TileTag)) return PrefabNames.Tile;\n        return null;\n    }\n\n    render(){\n        const entities = this.entityManager.getEntityWithComponent(Position);\n\n        for (const id of entities) {\n            const prefabName = this.getPrefabName(id);\n            if (!prefabName) continue;\n            const position = this.entityManager.getComponent(id, Position);\n            if (!position) continue;\n\n            let view = this.entityManager.getComponent(id, ViewComponent);\n            if(!view){\n                console.log(prefabName);\n                view = new ViewComponent(prefabName);\n                this.entityManager.addComponent(id, view, ViewComponent);\n                \n                const prefab = this.prefabs[prefabName];\n                const node = instantiate(prefab);\n                node.setPosition(new Vec3(position.x * this.tileSize, position.y * this.tileSize, 0));\n\n                /*if (prefabName === 'Tile') node.getComponent(UITransform).priority = 0;\n                else if (prefabName === 'Enemy') node.getComponent(UITransform).priority = 1;\n                else if (prefabName === 'Player') node.getComponent(UITransform).priority = 2;*/\n                //node.setSiblingIndex(this.gameRoot.children.length - 1);\n                \n                /*switch (prefabName) {\n                    case PrefabNames.Tile:\n                        node.setSiblingIndex(0);\n                        break;\n                    case PrefabNames.Enemy:\n                        node.setSiblingIndex(1);\n                        break;\n                    case PrefabNames.Player:\n                        node.setSiblingIndex(entities.length - 1);\n                        break;\n                }*/\n                \n                if (prefabName === PrefabNames.Tile) \n                    node.on(Node.EventType.TOUCH_END, () => {\n                        SceneController._instance?.onTileTapped(position);\n                    });\n\n                if (prefabName === PrefabNames.Player)\n                    this.playerLayer.addChild(node);\n                else if (prefabName === PrefabNames.Tile) \n                    this.tilesLayer.addChild(node);\n                else if (prefabName === PrefabNames.Enemy) \n                    this.entityLayer.addChild(node);\n                \n                view.node = node;    \n\n                //console.log('add ' + prefabName + position.x + position.y)\n                //console.log(\"Added node\", node.name, \"at\", node.getPosition());\n                //console.log(node.isValid, node.activeInHierarchy, node.getWorldPosition());\n            }\n        }\n    }\n\n    update(dt: number) {\n        const entities = this.entityManager.getEntityWithComponent(ViewComponent);\n        for (const id of entities) {\n            const view = this.entityManager.getComponent(id, ViewComponent);\n            const pos  = this.entityManager.getComponent(id, Position);\n            if (view?.node && pos) {\n                view.node.setPosition(\n                    new Vec3(pos.x * this.tileSize, pos.y * this.tileSize, view.node.getPosition().z)\n                );\n            }\n        }\n    }\n\n    /*function inputFromVec2(entity: number, type: string, vec: Vec2) {\n        return new InputComponent(entity, type as any, vec.x, vec.y);\n    }*/\n}\n\n"]}