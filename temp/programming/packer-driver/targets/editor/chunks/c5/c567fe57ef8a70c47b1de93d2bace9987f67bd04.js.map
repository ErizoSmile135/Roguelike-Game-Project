{"version":3,"sources":["file:///C:/GameECSProject/assets/scripts/systems/RenderSystem.ts"],"names":["RenderSystem","instantiate","Vec3","Node","UITransform","PlayerTag","PrefabNames","EnemyTag","TileTag","Position","ViewComponent","SceneController","constructor","entityManager","prefabs","gameRoot","tileSize","getPrefabName","entityId","hasComponent","Player","Enemy","Tile","render","entities","getEntityWithComponent","id","prefabName","position","getComponent","view","console","log","addComponent","prefab","node","setPosition","x","y","priority","on","EventType","TOUCH_END","_instance","onTileTapped","addChild","update","dt","pos","getPosition","z"],"mappings":"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","sourcesContent":["import { instantiate, Prefab, Vec3, Node, UITransform } from \"cc\";\nimport { EntityManager } from \"../core/EntityManager\";\nimport { PlayerTag } from \"../components/Tag/PlayerTag\";\nimport { PrefabNames } from \"../data/consts\";\nimport { EnemyTag } from \"../components/Tag/EnemyTag\";\nimport { TileTag } from \"../components/Tag/TileTag\";\nimport { Position } from \"../components/Position\";\nimport { ViewComponent } from \"../components/core/ViewComponent\";\nimport { SceneController } from \"../core/SceneController\";\nimport { PrefabType } from \"../data/types\";\n\nexport class RenderSystem {\n    constructor(private entityManager: EntityManager,\n                private prefabs: Record<PrefabType, Prefab>,\n                private gameRoot: Node,\n                private tileSize: number\n    ){}\n\n    getPrefabName(entityId: number): PrefabType | null {\n        if (this.entityManager.hasComponent(entityId, PlayerTag)) return PrefabNames.Player;\n        if (this.entityManager.hasComponent(entityId, EnemyTag)) return PrefabNames.Enemy;\n        if (this.entityManager.hasComponent(entityId, TileTag)) return PrefabNames.Tile;\n        return null;\n    }\n\n    render(){\n        const entities = this.entityManager.getEntityWithComponent(Position);\n\n        for (const id of entities) {\n            const prefabName = this.getPrefabName(id);\n            if (!prefabName) continue;\n            const position = this.entityManager.getComponent(id, Position);\n            if (!position) continue;\n\n            let view = this.entityManager.getComponent(id, ViewComponent);\n            if(!view){\n                console.log(prefabName);\n                view = new ViewComponent(prefabName);\n                this.entityManager.addComponent(id, view, ViewComponent);\n                \n                const prefab = this.prefabs[prefabName];\n                const node = instantiate(prefab);\n                node.setPosition(new Vec3(position.x * this.tileSize, position.y * this.tileSize, 0));\n\n                if (prefabName === 'Tile') node.getComponent(UITransform).priority = 0;\n                else if (prefabName === 'Enemy') node.getComponent(UITransform).priority = 1;\n                else if (prefabName === 'Player') node.getComponent(UITransform).priority = 2;\n                \n                /*switch (prefabName) {\n                    case PrefabNames.Tile:\n                        node.setSiblingIndex(0);\n                        break;\n                    case PrefabNames.Enemy:\n                        node.setSiblingIndex(1);\n                        break;\n                    case PrefabNames.Player:\n                        node.setSiblingIndex(2);\n                        break;\n                }*/\n                \n                if (prefabName === PrefabNames.Tile) \n                    node.on(Node.EventType.TOUCH_END, () => {\n                        SceneController._instance?.onTileTapped(position);\n                    });\n\n                this.gameRoot.addChild(node);\n                view.node = node;    \n\n                //console.log('add ' + prefabName + position.x + position.y)\n                //console.log(\"Added node\", node.name, \"at\", node.getPosition());\n                //console.log(node.isValid, node.activeInHierarchy, node.getWorldPosition());\n            }\n        }\n    }\n\n    update(dt: number) {\n        const entities = this.entityManager.getEntityWithComponent(ViewComponent);\n        for (const id of entities) {\n            const view = this.entityManager.getComponent(id, ViewComponent);\n            const pos  = this.entityManager.getComponent(id, Position);\n            if (view?.node && pos) {\n                view.node.setPosition(\n                    new Vec3(pos.x * this.tileSize, pos.y * this.tileSize, view.node.getPosition().z)\n                );\n            }\n        }\n    }\n\n    /*function inputFromVec2(entity: number, type: string, vec: Vec2) {\n        return new InputComponent(entity, type as any, vec.x, vec.y);\n    }*/\n}\n\n"]}