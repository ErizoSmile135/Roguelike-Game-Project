{"version":3,"sources":["file:///C:/GameECSProject/assets/scripts/core/Pathfinding.ts"],"names":["findPathInTemplate","template","start","goal","layout","rows","length","cols","key","p","x","y","isPassable","ch","frontier","visited","Set","parent","Map","dirs","cur","shift","d","nx","ny","k","has","add","set","push","path","curKey","cx","cy","split","map","Number","unshift","get","Position"],"mappings":"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","sourcesContent":["import { RoomTemplate } from \"../data/types\";\r\nimport { Position } from \"../components/Position\";\r\n\r\n\r\n/**\r\n * Ищет путь по шаблону комнаты. \r\n * @param template – шаблон с layout[y][x] \r\n * @param start    – текущая клетка игрока\r\n * @param goal     – целевая клетка (куда тапнули)\r\n * @returns список позиций по кратчайшему пути (без start) или null\r\n */\r\nexport function findPathInTemplate(\r\n    template: RoomTemplate,\r\n    start: Position,\r\n    goal: Position\r\n): Position[] | null {\r\n    const layout = template.layout;\r\n    const rows = layout.length;\r\n    const cols = layout[0].length;\r\n    const key = (p: Position) => `${p.x},${p.y}`;\r\n\r\n    // Проверяет, что (x,y) в пределах и не стена и не чужой враг\r\n    function isPassable(x: number, y: number): boolean {\r\n        if (x < 0 || x >= cols || y < 0 || y >= rows) return false;\r\n        const ch = layout[y][x];\r\n        if (ch === \"#\") return false;          // стена\r\n        if (ch === \"E\" && !(x === goal.x && y === goal.y)) {\r\n            return false;                        // враг, но не цель\r\n        }\r\n        // '.', 'P', или 'E' в точке goal\r\n        return true;\r\n    }\r\n\r\n    // BFS\r\n    const frontier: Position[] = [new Position(start.x, start.y)];\r\n    const visited = new Set<string>([key(start)]);\r\n    const parent = new Map<string, string>([[key(start), \"\"]]);\r\n\r\n    const dirs = [\r\n        { x: 1, y: 0 },\r\n        { x: -1, y: 0 },\r\n        { x: 0, y: 1 },\r\n        { x: 0, y: -1 },\r\n    ];\r\n\r\n    while (frontier.length > 0) {\r\n        const cur = frontier.shift()!;\r\n        if (cur.x === goal.x && cur.y === goal.y) break;\r\n\r\n        for (const d of dirs) {\r\n            const nx = cur.x + d.x, ny = cur.y + d.y;\r\n            const k = `${nx},${ny}`;\r\n            if (visited.has(k)) continue;\r\n            if (!isPassable(nx, ny)) continue;\r\n            visited.add(k);\r\n            parent.set(k, key(cur));\r\n            frontier.push(new Position(nx, ny));\r\n        }\r\n    }\r\n\r\n    // Если goal не достигнут\r\n    if (!parent.has(key(goal))) return null;\r\n\r\n    // Восстанавливаем путь от goal к start\r\n    const path: Position[] = [];\r\n    let curKey = key(goal);\r\n    while (curKey !== \"\") {\r\n        const [cx, cy] = curKey.split(\",\").map(Number);\r\n        path.unshift(new Position(cx, cy));\r\n        curKey = parent.get(curKey)!;\r\n    }\r\n    path.shift(); // убираем стартовую клетку\r\n    return path;\r\n}\r\n"]}