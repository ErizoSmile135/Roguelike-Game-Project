{"version":3,"sources":["file:///C:/GameECSProject/assets/scripts/systems/TrapSystem.ts"],"names":["TrapSystem","eventBus","Damage","constructor","em","on","onTrapTriggered","bind","entity","trap","dmgComp","getComponent","damage","console","log"],"mappings":";;;gDAyCaA,U;;;;;;;;;;;;;;;;;;;;;;AAJJC,MAAAA,Q,iBAAAA,Q;;AAEAC,MAAAA,M,iBAAAA,M;;;;;;;4BAEIF,U,GAAN,MAAMA,UAAN,CAAiB;AACtBG,QAAAA,WAAW,CAASC,EAAT,EAA4B;AAAA,eAAnBA,EAAmB,GAAnBA,EAAmB;AACrC;AAAA;AAAA,oCAASC,EAAT,CAAY,eAAZ,EAA6B,KAAKC,eAAL,CAAqBC,IAArB,CAA0B,IAA1B,CAA7B;AACD;;AAEOD,QAAAA,eAAe,CAAC;AAAEE,UAAAA,MAAF;AAAUC,UAAAA;AAAV,SAAD,EAAqD;AAC1E,gBAAMC,OAAO,GAAG,KAAKN,EAAL,CAAQO,YAAR,CAAqBF,IAArB;AAAA;AAAA,+BAAhB;AACA,gBAAMG,MAAM,GAAGF,OAAO,GAAGA,OAAO,CAACE,MAAX,GAAoB,CAA1C,CAF0E,CAE5B;;AAC9CC,UAAAA,OAAO,CAACC,GAAR,CAAa,uBAAsBN,MAAO,aAAYC,IAAK,cAAaG,MAAO,EAA/E,EAH0E,CAI1E;AACA;AACA;AACD;;AAZqB,O","sourcesContent":["/*import { eventBus }        from '../core/EventBus';\r\nimport { EntityManager }   from '../core/EntityManager';\r\nimport { Position }        from '../components/Position';\r\nimport { Trap } from '../components/Trap';\r\n\r\nexport class TrapSystem {\r\n  constructor(private em: EntityManager) {\r\n    // подписываемся на окончание движения\r\n    eventBus.on('moveComplete', this.onMoveComplete.bind(this));\r\n  }\r\n\r\n  private onMoveComplete(payload: { entity: number }) {\r\n    const actor = payload.entity;\r\n    // получаем позицию, куда встал актор\r\n    const pos = this.em.getComponent(actor, Position);\r\n    if (!pos) return;\r\n\r\n    // ищем все сущности-ловушки на этой клеткеs\r\n    const traps = this.em.getEntityWithComponent(Trap)\r\n      .filter(trapId => {\r\n        const trapPos = this.em.getComponent(trapId, Position);\r\n        return trapPos?.x === pos.x && trapPos?.y === pos.y;\r\n      });\r\n\r\n    // для каждой найденной ловушки эмитим событие\r\n    for (const trapId of traps) {\r\n      const trap = this.em.getComponent(trapId, Trap)!;\r\n      console.log(`[TrapSystem] entity ${actor} triggered trap ${trapId} for ${trap.damage} dmg`);\r\n      eventBus.emit('trapTriggered', {\r\n        entity: actor,\r\n        trap: trapId,\r\n        damage: trap.damage,\r\n      });\r\n    }\r\n  }\r\n}*/\r\n\r\nimport { eventBus }      from '../core/EventBus';\r\nimport { EntityManager } from '../core/EntityManager';\r\nimport { Damage }        from '../components/Damage';\r\n\r\nexport class TrapSystem {\r\n  constructor(private em: EntityManager) {\r\n    eventBus.on('trapTriggered', this.onTrapTriggered.bind(this));\r\n  }\r\n\r\n  private onTrapTriggered({ entity, trap }: { entity: number; trap: number }) {\r\n    const dmgComp = this.em.getComponent(trap, Damage);\r\n    const damage = dmgComp ? dmgComp.damage : 1;  // default 1\r\n    console.log(`[TrapSystem] Entity ${entity} hit trap ${trap}, damage = ${damage}`);\r\n    // тут можно эмитить событие о нанесённом уроне или сразу добавлять компонент:\r\n    // const dmgEnt = this.em.createEntity();\r\n    // this.em.addComponent(dmgEnt, new DamageIntent(entity, damage), DamageIntent);\r\n  }\r\n}\r\n\r\n"]}