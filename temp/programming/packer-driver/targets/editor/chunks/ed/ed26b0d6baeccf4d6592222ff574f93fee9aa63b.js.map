{"version":3,"sources":["file:///C:/GameECSProject/assets/scripts/core/EntityManager.ts"],"names":["EntityManager","ViewComponent","nextEntityId","components","Map","createEntity","entityId","addComponent","component","componentType","has","set","get","getEntityWithComponent","entityWithComponent","forEach","push","getComponent","removeComponent","delete","hasComponent","removeEntity","id","view","node","isValid","destroy"],"mappings":";;;6CAIaA,a;;;;;;;;;;;;;;AAJJC,MAAAA,a,iBAAAA,a;;;;;;;+BAIID,a,GAAN,MAAMA,aAAN,CAAoB;AAAA;AAAA,eAEfE,YAFe,GAEQ,CAFR;AAAA,eAGfC,UAHe,GAG0C,IAAIC,GAAJ,EAH1C;AAAA;;AAKvBC,QAAAA,YAAY,GAAU;AAClB,gBAAMC,QAAQ,GAAG,KAAKJ,YAAL,EAAjB;AACA,iBAAOI,QAAP;AACH;;AAEDC,QAAAA,YAAY,CAAID,QAAJ,EAAsBE,SAAtB,EAAoCC,aAApC,EAAqE;AAAA;;AAC7E,cAAI,CAAC,KAAKN,UAAL,CAAgBO,GAAhB,CAAoBD,aAApB,CAAL,EAAwC;AACpC,iBAAKN,UAAL,CAAgBQ,GAAhB,CAAoBF,aAApB,EAAmC,IAAIL,GAAJ,EAAnC;AACH;;AACD,uCAAKD,UAAL,CAAgBS,GAAhB,CAAoBH,aAApB,2CAAoCE,GAApC,CAAwCL,QAAxC,EAAkDE,SAAlD;AACH;;AAEDK,QAAAA,sBAAsB,CAAIJ,aAAJ,EAA+C;AAAA;;AACjE,cAAIK,mBAA6B,GAAG,EAApC;AACA,wCAAKX,UAAL,CAAgBS,GAAhB,CAAoBH,aAApB,4CAAoCM,OAApC,CAA4C,CAACP,SAAD,EAAYF,QAAZ,KAAyB;AACjEQ,YAAAA,mBAAmB,CAACE,IAApB,CAAyBV,QAAzB;AACH,WAFD;AAGA,iBAAOQ,mBAAP;AACH;;AAEDG,QAAAA,YAAY,CAAIX,QAAJ,EAAsBG,aAAtB,EAAiE;AAAA;;AACzE,iBAAO,+BAAKN,UAAL,CAAgBS,GAAhB,CAAoBH,aAApB,4CAAoCG,GAApC,CAAwCN,QAAxC,MAAqD,IAA5D;AACH;;AAEDY,QAAAA,eAAe,CAAIZ,QAAJ,EAAsBG,aAAtB,EAAuD;AAAA;;AAClE,wCAAKN,UAAL,CAAgBS,GAAhB,CAAoBH,aAApB,4CAAoCU,MAApC,CAA2Cb,QAA3C;AACH;;AAEDc,QAAAA,YAAY,CAAId,QAAJ,EAAsBG,aAAtB,EAAiE;AAAA;;AACzE,mEAAO,KAAKN,UAAL,CAAgBS,GAAhB,CAAoBH,aAApB,CAAP,qBAAO,sBAAoCC,GAApC,CAAwCJ,QAAxC,CAAP,oCAA4D,KAA5D;AACH;;AAEDe,QAAAA,YAAY,CAACC,EAAD,EAAY;AAAA;;AACpB,gBAAMC,IAAI,GAAG,KAAKN,YAAL,CAAkBK,EAAlB;AAAA;AAAA,6CAAb;;AACA,cAAIC,IAAJ,0BAAIA,IAAI,CAAEC,IAAV,aAAI,WAAYC,OAAhB,EAAyB;AACvBF,YAAAA,IAAI,CAACC,IAAL,CAAUE,OAAV;AACD;;AAED,eAAKvB,UAAL,CAAgBY,OAAhB,CAAyBP,SAAD,IAAe;AACnCA,YAAAA,SAAS,CAACW,MAAV,CAAiBG,EAAjB;AACH,WAFD;AAGH;;AA9CsB,O","sourcesContent":["import { ViewComponent } from \"../components/ViewComponent\";\n\ntype ComponentClass<T> = { new (...args: any[]): T };\n\nexport class EntityManager {\n    \n    private nextEntityId: number = 0;\n    private components: Map<ComponentClass<any>, Map<number, any>> = new Map();\n\n    createEntity(): number{\n        const entityId = this.nextEntityId++;\n        return entityId;\n    }\n\n    addComponent<T>(entityId: number, component: T, componentType: ComponentClass<T>){\n        if (!this.components.has(componentType)){\n            this.components.set(componentType, new Map());\n        }\n        this.components.get(componentType)?.set(entityId, component);\n    }\n\n    getEntityWithComponent<T>(componentType: ComponentClass<T>): number[]{\n        let entityWithComponent: number[] = [];\n        this.components.get(componentType)?.forEach((component, entityId) => {\n            entityWithComponent.push(entityId);\n        })  \n        return entityWithComponent;\n    }\n       \n    getComponent<T>(entityId: number, componentType: ComponentClass<T>): T | null{\n        return this.components.get(componentType)?.get(entityId) || null;\n    }\n\n    removeComponent<T>(entityId: number, componentType: ComponentClass<T>){\n        this.components.get(componentType)?.delete(entityId);\n    }\n\n    hasComponent<T>(entityId: number, componentType: ComponentClass<T>): boolean {\n        return this.components.get(componentType)?.has(entityId) ?? false;\n    }\n\n    removeEntity(id: number){\n        const view = this.getComponent(id, ViewComponent);\n        if (view?.node?.isValid) {\n          view.node.destroy();\n        }\n        \n        this.components.forEach((component) => {\n            component.delete(id);\n        });\n    }\n}\n\n"]}